#include <IRremote.h>
#include <stdarg.h>
#include <stdio.h>

const int ARRAY_SIZE = 67;
const int KHZ = 38; // 38KHz carrier frequency

String serialData;
boolean sendData;

IRsend irsend;

void setup() {
  Serial.begin(9600);
  while (! Serial);
}

void loop() {
  if (Serial.available()) {
    serialData = Serial.readString();

    // Make sure to send data with the "No line ending" option
    if (serialData.length() > 0) {
      unsigned int rawData[ARRAY_SIZE];
      sendData = true;

      if (serialData == "O") { // ON
        fillArray(rawData, 8950, 4550, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 700, 450, 700, 450, 700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 450, 700, 450, 1750, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 650, 500, 650, 500, 1750, 500, 650, 500, 1700, 500, 1750, 500, 1750, 450, 700, 450, 1750, 500);
      } else if (serialData == "F") { // OFF
        fillArray(rawData, 8900, 4600, 450, 700, 450, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 700, 450, 700, 500, 1700, 500, 650, 500, 650, 500, 700, 450, 1750, 500, 650, 500, 1750, 500, 1700, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500, 650, 500, 1750, 450);
      } else if (serialData == "R") { // RESET
        fillArray(rawData, 8900, 4550, 500, 700, 450, 700, 450, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 450, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 700, 450, 700, 450, 700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500);
      } else if (serialData == "N") { // NEXT (UP)
        fillArray(rawData, 8950, 4550, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 700, 450, 1750, 500, 1750, 450, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 650, 500, 1700, 500, 1750, 500, 650, 500, 1750, 500, 650, 500, 650, 500, 650, 500, 1750, 450, 700, 450, 700, 500, 1700, 500, 650, 500, 1750, 500, 1750, 450, 1750, 500);
      } else if (serialData == "P") { // PREVIOUS (DOWN)
        fillArray(rawData, 8900, 4600, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 650, 500, 650, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 650, 500, 700, 450, 1750, 500, 1750, 450, 700, 500, 650, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500);
      } else if (serialData == "U") { // SPEED UP
        fillArray(rawData, 9000, 4550, 500, 650, 500, 650, 500, 650, 500, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 650, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 650, 500, 1750, 500, 650, 500, 650, 500, 1750, 450, 1750, 500, 1750, 500, 650, 500, 1750, 450);
      } else if (serialData == "D") { // SPEED DOWN
        fillArray(rawData, 8950, 4600, 450, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 650, 500, 650, 500, 650, 500, 1750, 450, 700, 500, 650, 500, 650, 500, 650, 500, 1750, 450, 1750, 500, 1750, 500, 650, 500, 1750, 450);
      } else if (serialData == "S") { // FLASH ON
        fillArray(rawData, 8950, 4550, 500, 700, 450, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 700, 450, 700, 450, 700, 500, 650, 500, 1750, 450, 700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 650, 500, 1750, 500);
      } else if (serialData == "H") { // FLASH OFF
        fillArray(rawData, 8950, 4550, 500, 650, 500, 700, 450, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 700, 450, 700, 450, 1750, 500, 650, 500, 650, 500, 700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 600, 550, 500, 1750, 500);
      } else if (serialData == "-") { // DIM DOWN
        fillArray(rawData, 8950, 4550, 500, 650, 500, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 650, 500, 1750, 500, 650, 500, 1750, 450, 700, 450, 700, 500, 650, 500, 650, 500, 1750, 450, 700, 500, 1700, 500, 650, 500, 1750, 500, 1750, 450, 1750, 500);
      } else if (serialData == "+") { // DIM UP
        fillArray(rawData, 8900, 4600, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 650, 500, 650, 500, 1750, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1750, 450, 700, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500);
      } else if (serialData == "1") { // 1
        fillArray(rawData, 8950, 4550, 500, 650, 500, 650, 500, 650, 500, 650, 550, 600, 500, 650, 500, 700, 500, 650, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 650, 500, 650, 500, 1750, 500, 1700, 500, 650, 500, 700, 450, 700, 500, 650, 500, 1700, 500, 1750, 500, 650, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500);
      } else if (serialData == "2") { // 2
        fillArray(rawData, 9000, 4550, 550, 600, 500, 650, 550, 600, 550, 600, 550, 600, 550, 600, 550, 600, 550, 650, 450, 1750, 550, 1700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 550, 1700, 500, 1700, 550, 1700, 500, 650, 550, 1650, 550, 1700, 550, 600, 550, 600, 550, 600, 550, 600, 500, 700, 500, 1700, 550, 600, 550, 600, 550, 1700, 500, 1750, 450, 1750, 500, 1750, 550);
      } else if (serialData == "3") { // 3
        fillArray(rawData, 8950, 4550, 500, 700, 450, 700, 450, 700, 450, 700, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 1750, 450, 700, 500, 650, 500, 650, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 1750, 450, 1750, 500, 650, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500);
      } else if (serialData == "4") { // 4
        fillArray(rawData, 8950, 4550, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 650, 500, 700, 450, 1750, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 1750, 500, 1750, 450, 1750, 500, 650, 500, 1750, 500, 1700, 500, 1750, 500, 1700, 500, 700, 450, 1750, 500, 650, 500, 1750, 500, 650, 500, 650, 500, 650, 500, 650, 500, 1750, 500, 650, 500, 1700, 500);
      } else {
        sendData = false;
      }

      if (sendData) {
        irsend.sendRaw(rawData, sizeof(rawData) / sizeof(rawData[0]), KHZ);
      }
    }

    delay(1000); //1 second delay between each signal burst
  }
}

void fillArray(unsigned int rawData[], ...) {
  va_list args;
  va_start (args, rawData);  // Requires the last fixed parameter (to get the address)
  for (int x = 0; x < ARRAY_SIZE; x++) {
    rawData[x] = va_arg(args, unsigned int); // Requires the type to cast to. Increments ap to the next argument
  }
  va_end(args);
}

